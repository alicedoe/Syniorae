package com.syniorae.presentation.fragments.configuration

import androidx.lifecycle.viewModelScope
import com.syniorae.data.repository.widgets.WidgetRepository
import com.syniorae.domain.models.widgets.WidgetType
import com.syniorae.presentation.activities.CalendarConfigurationActivity
import com.syniorae.presentation.common.BaseViewModel
import com.syniorae.presentation.common.NavigationEvent
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asSharedFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

/**
 * ViewModel pour la page de configuration des widgets (Page 2)
 * Version compl√®te avec WidgetRepository
 */
class ConfigurationViewModel(
    private val widgetRepository: WidgetRepository
) : BaseViewModel() {

    // R√©cup√©rer le CalendarRepository via DI
    private val calendarRepository = com.syniorae.core.di.DependencyInjection.getCalendarRepository()

    // √âtat de la vue
    private val _viewState = MutableStateFlow(ConfigurationViewState())
    val viewState = _viewState.asStateFlow()

    // Navigation
    private val _navigationEvent = MutableSharedFlow<NavigationEvent>()
    val navigationEvent = _navigationEvent.asSharedFlow()

    // √âv√©nement pour lancer le tunnel de configuration
    private val _configurationLaunchEvent = MutableSharedFlow<Unit>()
    val configurationLaunchEvent = _configurationLaunchEvent.asSharedFlow()

    init {
        loadInitialState()
        observeWidgetChanges()
    }

    /**
     * Charge l'√©tat initial depuis le WidgetRepository
     */
    private fun loadInitialState() {
        executeWithLoading {
            val calendarWidget = widgetRepository.getWidget(WidgetType.CALENDAR)
            updateUIFromWidget(calendarWidget)
        }
    }

    /**
     * Observe les changements de widgets (pour les mises √† jour en temps r√©el)
     */
    private fun observeWidgetChanges() {
        viewModelScope.launch {
            widgetRepository.widgets.collect { widgets ->
                val calendarWidget = widgets.find { it.type == WidgetType.CALENDAR }
                updateUIFromWidget(calendarWidget)
            }
        }
    }

    /**
     * Met √† jour l'UI selon l'√©tat du widget
     */
    private fun updateUIFromWidget(calendarWidget: com.syniorae.domain.models.widgets.Widget?) {
        val calendarState = when {
            calendarWidget == null -> {
                // Widget non trouv√© (cas anormal)
                CalendarWidgetState(
                    isEnabled = false,
                    lastSyncDisplay = "Widget non trouv√©",
                    eventsCountDisplay = "0 √©v√©nements",
                    syncStatusDisplay = "Erreur syst√®me",
                    hasError = true
                )
            }
            calendarWidget.isActive() -> {
                // Widget actif et configur√©
                CalendarWidgetState(
                    isEnabled = true,
                    lastSyncDisplay = "Configur√© - Pr√™t",
                    eventsCountDisplay = "Pr√™t √† synchroniser",
                    syncStatusDisplay = "‚úì Configur√©",
                    hasError = false
                )
            }
            calendarWidget.status == com.syniorae.domain.models.widgets.WidgetStatus.CONFIGURING -> {
                // Widget en cours de configuration
                CalendarWidgetState(
                    isEnabled = true,
                    lastSyncDisplay = "Configuration...",
                    eventsCountDisplay = "En cours",
                    syncStatusDisplay = "üîß Configuration en cours",
                    hasError = false
                )
            }
            calendarWidget.hasError() -> {
                // Widget en erreur
                CalendarWidgetState(
                    isEnabled = false,
                    lastSyncDisplay = "Erreur",
                    eventsCountDisplay = "0 √©v√©nements",
                    syncStatusDisplay = "‚úó ${calendarWidget.errorMessage ?: "Erreur"}",
                    hasError = true
                )
            }
            else -> {
                // Widget d√©sactiv√© (√©tat par d√©faut)
                CalendarWidgetState(
                    isEnabled = false,
                    lastSyncDisplay = "Jamais",
                    eventsCountDisplay = "0 √©v√©nements",
                    syncStatusDisplay = "Widget d√©sactiv√©",
                    hasError = false
                )
            }
        }

        _viewState.value = _viewState.value.copy(calendarWidget = calendarState)
    }

    /**
     * Active/d√©sactive le widget calendrier
     */
    fun toggleCalendarWidget(isEnabled: Boolean) {
        executeWithLoading {
            if (isEnabled) {
                // V√©rifier si d√©j√† configur√©
                val hasConfig = widgetRepository.hasConfiguration(WidgetType.CALENDAR)

                if (hasConfig) {
                    // R√©activer directement
                    val success = widgetRepository.enableWidget(WidgetType.CALENDAR)
                    if (success) {
                        showMessage("Widget r√©activ√©")
                    } else {
                        showError("Impossible de r√©activer le widget")
                    }
                } else {
                    // Marquer en mode configuration et lancer le tunnel
                    widgetRepository.setWidgetConfiguring(WidgetType.CALENDAR)
                    launchCalendarConfiguration()
                }
            } else {
                // D√©sactiver le widget
                val success = widgetRepository.disableWidget(WidgetType.CALENDAR)
                if (success) {
                    showMessage("Widget d√©sactiv√©")
                } else {
                    showError("Impossible de d√©sactiver le widget")
                }
            }
        }
    }

    /**
     * Lance le tunnel de configuration
     */
    private suspend fun launchCalendarConfiguration() {
        _configurationLaunchEvent.emit(Unit)
    }

    /**
     * Appel√© quand la configuration est termin√©e avec succ√®s
     */
    fun onConfigurationCompleted() {
        executeWithLoading {
            // Le WidgetRepository a d√©j√† √©t√© mis √† jour par CalendarConfigurationViewModel
            // On affiche juste un message de confirmation
            showMessage("Widget calendrier configur√© avec succ√®s !")

            // Forcer le rechargement de l'√©tat
            loadInitialState()
        }
    }

    /**
     * Appel√© quand la configuration est annul√©e
     */
    fun onConfigurationCancelled() {
        executeWithLoading {
            // Remettre le widget en OFF
            val success = widgetRepository.disableWidget(WidgetType.CALENDAR)
            if (success) {
                showMessage("Configuration annul√©e")
            } else {
                showError("Erreur lors de l'annulation")
            }
        }
    }

    /**
     * Navigue vers les param√®tres d√©taill√©s du calendrier
     */
    fun navigateToCalendarSettings() {
        viewModelScope.launch {
            _navigationEvent.emit(NavigationEvent.NavigateToSettings)
        }
    }

    /**
     * Lance la synchronisation du calendrier
     */
    fun syncCalendar() {
        val calendarWidget = widgetRepository.getWidget(WidgetType.CALENDAR)

        if (calendarWidget?.isActive() != true) {
            showError("Le widget doit √™tre configur√© avant la synchronisation")
            return
        }

        executeWithLoading {
            showMessage("Synchronisation en cours...")

            // Utiliser le CalendarRepository pour la synchronisation
            when (val result = calendarRepository.syncCalendar()) {
                is com.syniorae.data.repository.calendar.SyncResult.Success -> {
                    showMessage("Synchronisation termin√©e - ${result.eventsCount} √©v√©nements r√©cup√©r√©s")
                }
                is com.syniorae.data.repository.calendar.SyncResult.Error -> {
                    showError("Erreur de synchronisation: ${result.message}")
                }
            }
        }
    }

    /**
     * Supprime compl√®tement la configuration du calendrier
     */
    fun deleteCalendarConfiguration() {
        executeWithLoading {
            val success = widgetRepository.deleteWidgetConfiguration(WidgetType.CALENDAR)
            if (success) {
                showMessage("Configuration supprim√©e")
            } else {
                showError("Erreur lors de la suppression")
            }
        }
    }

    /**
     * Restaure la configuration depuis les backups
     */
    fun restoreCalendarConfiguration() {
        executeWithLoading {
            val success = widgetRepository.restoreWidgetConfiguration(WidgetType.CALENDAR)
            if (success) {
                showMessage("Configuration restaur√©e depuis le backup")
            } else {
                showError("Aucun backup trouv√© ou erreur lors de la restauration")
            }
        }
    }
}

/**
 * √âtat de la vue de configuration
 */
data class ConfigurationViewState(
    val calendarWidget: CalendarWidgetState = CalendarWidgetState()
)

/**
 * √âtat du widget calendrier
 */
data class CalendarWidgetState(
    val isEnabled: Boolean = false,
    val lastSyncDisplay: String = "Jamais",
    val eventsCountDisplay: String = "0 √©v√©nements",
    val syncStatusDisplay: String = "Widget d√©sactiv√©",
    val hasError: Boolean = false
)