package com.syniorae.presentation.fragments.calendar.settings

import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.viewModelScope
import com.syniorae.core.di.DependencyInjection
import com.syniorae.data.local.json.JsonFileType
import com.syniorae.data.local.json.models.CalendarConfigurationJsonModel
import com.syniorae.data.local.json.models.IconsJsonModel
import com.syniorae.domain.models.widgets.WidgetType
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asSharedFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

/**
 * ViewModel pour la page des paramÃ¨tres dÃ©taillÃ©s du calendrier (Page 3)
 */
class CalendarSettingsViewModel : ViewModel() {

    private val jsonFileManager = DependencyInjection.getJsonFileManager()
    private val widgetRepository = DependencyInjection.getWidgetRepository()
    private val googleAuthManager = DependencyInjection.getGoogleAuthManager()

    private val _uiState = MutableStateFlow(CalendarSettingsUiState())
    val uiState = _uiState.asStateFlow()

    private val _events = MutableSharedFlow<CalendarSettingsEvent>()
    val events = _events.asSharedFlow()

    /**
     * Charge les paramÃ¨tres actuels depuis les fichiers de configuration
     */
    fun loadSettings() {
        println("ðŸ”¥ CalendarSettingsViewModel.loadSettings() - DÃ‰BUT")

        // Forcer une nouvelle instance du JsonFileManager pour Ã©viter le cache
        println("ðŸ”¥ FORÃ‡AGE D'UN NOUVEAU JsonFileManager...")
        com.syniorae.core.di.DependencyInjection.resetJsonFileManager()
        val freshJsonFileManager = com.syniorae.core.di.DependencyInjection.getJsonFileManager()
        println("ðŸ”¥ Nouvelle instance JsonFileManager: ${freshJsonFileManager.hashCode()}")

        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(isLoading = true)
            println("ðŸ”¥ CalendarSettingsViewModel.loadSettings() - Loading activÃ©")

            try {
                // LOGS DÃ‰TAILLÃ‰S pour traquer la source des donnÃ©es
                println("ðŸ”¥ === DIAGNOSTIC COMPLET ===")
                println("ðŸ”¥ JsonFileManager instance: ${jsonFileManager.hashCode()}")
                println("ðŸ”¥ GoogleAuthManager instance: ${googleAuthManager.hashCode()}")

                // Charger la configuration principale
                println("ðŸ”¥ CalendarSettingsViewModel.loadSettings() - Lecture fichier CONFIG")
                val config = freshJsonFileManager.readJsonFile(
                    WidgetType.CALENDAR,
                    JsonFileType.CONFIG,
                    CalendarConfigurationJsonModel::class.java
                )
                println("ðŸ”¥ CalendarSettingsViewModel.loadSettings() - Config RAW: $config")
                println("ðŸ”¥ CalendarSettingsViewModel.loadSettings() - Config null? ${config == null}")

                if (config != null) {
                    println("ðŸ”¥ Config dÃ©tails:")
                    println("ðŸ”¥   - calendrier_id: '${config.calendrier_id}'")
                    println("ðŸ”¥   - calendrier_name: '${config.calendrier_name}'")
                    println("ðŸ”¥   - nb_semaines_max: ${config.nb_semaines_max}")
                    println("ðŸ”¥   - nb_evenements_max: ${config.nb_evenements_max}")
                    println("ðŸ”¥   - frequence_synchro: ${config.frequence_synchro}")
                }

                // Charger les associations d'icÃ´nes
                println("ðŸ”¥ CalendarSettingsViewModel.loadSettings() - Lecture fichier ICONS")
                val iconsData = freshJsonFileManager.readJsonFile(
                    WidgetType.CALENDAR,
                    JsonFileType.ICONS,
                    IconsJsonModel::class.java
                )
                println("ðŸ”¥ CalendarSettingsViewModel.loadSettings() - Icons: $iconsData")
                println("ðŸ”¥ CalendarSettingsViewModel.loadSettings() - Icons count: ${iconsData?.associations?.size ?: 0}")

                // RÃ©cupÃ©rer l'email du compte Google connectÃ©
                println("ðŸ”¥ CalendarSettingsViewModel.loadSettings() - RÃ©cupÃ©ration email Google")
                val googleEmail = googleAuthManager.getSignedInAccountEmail() ?: ""
                println("ðŸ”¥ CalendarSettingsViewModel.loadSettings() - Email: '$googleEmail'")
                println("ðŸ”¥ CalendarSettingsViewModel.loadSettings() - Email vide? ${googleEmail.isEmpty()}")

                // VÃ©rifier l'Ã©tat actuel de l'UI avant mise Ã  jour
                println("ðŸ”¥ Ã‰tat UI AVANT mise Ã  jour:")
                println("ðŸ”¥   - googleAccountEmail: '${_uiState.value.googleAccountEmail}'")
                println("ðŸ”¥   - selectedCalendarName: '${_uiState.value.selectedCalendarName}'")
                println("ðŸ”¥   - weeksAhead: ${_uiState.value.weeksAhead}")
                println("ðŸ”¥   - maxEvents: ${_uiState.value.maxEvents}")

                if (config != null) {
                    println("ðŸ”¥ CalendarSettingsViewModel.loadSettings() - Configuration trouvÃ©e, mise Ã  jour UI")
                    val newState = CalendarSettingsUiState(
                        isLoading = false,
                        googleAccountEmail = googleEmail,
                        selectedCalendarName = config.calendrier_name,
                        weeksAhead = config.nb_semaines_max,
                        maxEvents = config.nb_evenements_max,
                        syncFrequencyHours = config.frequence_synchro,
                        iconAssociationsCount = iconsData?.associations?.size ?: 0
                    )

                    println("ðŸ”¥ NOUVEAU Ã‰tat UI:")
                    println("ðŸ”¥   - googleAccountEmail: '${newState.googleAccountEmail}'")
                    println("ðŸ”¥   - selectedCalendarName: '${newState.selectedCalendarName}'")
                    println("ðŸ”¥   - weeksAhead: ${newState.weeksAhead}")
                    println("ðŸ”¥   - maxEvents: ${newState.maxEvents}")

                    _uiState.value = newState
                } else {
                    // Configuration non trouvÃ©e
                    println("ðŸ”¥ CalendarSettingsViewModel.loadSettings() - Configuration NON trouvÃ©e")
                    val emptyState = CalendarSettingsUiState(
                        isLoading = false,
                        googleAccountEmail = googleEmail
                    )

                    println("ðŸ”¥ Ã‰tat UI VIDE:")
                    println("ðŸ”¥   - googleAccountEmail: '${emptyState.googleAccountEmail}'")
                    println("ðŸ”¥   - selectedCalendarName: '${emptyState.selectedCalendarName}'")
                    println("ðŸ”¥   - weeksAhead: ${emptyState.weeksAhead}")
                    println("ðŸ”¥   - maxEvents: ${emptyState.maxEvents}")

                    _uiState.value = emptyState

                    if (googleEmail.isNotEmpty()) {
                        _events.emit(CalendarSettingsEvent.ShowError("Configuration non trouvÃ©e"))
                    }
                }

                println("ðŸ”¥ Ã‰tat UI FINAL:")
                println("ðŸ”¥   - googleAccountEmail: '${_uiState.value.googleAccountEmail}'")
                println("ðŸ”¥   - selectedCalendarName: '${_uiState.value.selectedCalendarName}'")
                println("ðŸ”¥   - weeksAhead: ${_uiState.value.weeksAhead}")
                println("ðŸ”¥   - maxEvents: ${_uiState.value.maxEvents}")

            } catch (e: Exception) {
                println("ðŸ”¥ CalendarSettingsViewModel.loadSettings() - ERREUR: ${e.message}")
                println("ðŸ”¥ CalendarSettingsViewModel.loadSettings() - Stack trace: ${e.stackTrace.contentToString()}")
                _uiState.value = _uiState.value.copy(isLoading = false)
                _events.emit(CalendarSettingsEvent.ShowError("Erreur lors du chargement: ${e.message}"))
            }
        }
        println("ðŸ”¥ CalendarSettingsViewModel.loadSettings() - FIN")
    }

    /**
     * Ouvre un popup pour modifier la sÃ©lection de calendrier
     */
    fun editCalendarSelection() {
        viewModelScope.launch {
            _events.emit(CalendarSettingsEvent.ShowCalendarSelectionDialog)
        }
    }

    /**
     * Ouvre un popup pour modifier la pÃ©riode de rÃ©cupÃ©ration
     */
    fun editPeriod() {
        viewModelScope.launch {
            _events.emit(CalendarSettingsEvent.ShowPeriodDialog)
        }
    }

    /**
     * Ouvre un popup pour modifier le nombre d'Ã©vÃ©nements
     */
    fun editEventsCount() {
        viewModelScope.launch {
            _events.emit(CalendarSettingsEvent.ShowEventsCountDialog)
        }
    }

    /**
     * Ouvre un popup pour modifier la frÃ©quence de synchronisation
     */
    fun editSyncFrequency() {
        viewModelScope.launch {
            _events.emit(CalendarSettingsEvent.ShowSyncFrequencyDialog)
        }
    }

    /**
     * Ouvre un popup pour modifier les associations d'icÃ´nes
     */
    fun editIconAssociations() {
        viewModelScope.launch {
            _events.emit(CalendarSettingsEvent.ShowIconAssociationsDialog)
        }
    }

    /**
     * Affiche la confirmation de dÃ©connexion
     */
    fun showDisconnectConfirmation() {
        viewModelScope.launch {
            _events.emit(CalendarSettingsEvent.ShowDisconnectDialog)
        }
    }

    /**
     * Met Ã  jour la sÃ©lection de calendrier
     */
    fun updateCalendarSelection(calendarId: String, calendarName: String) {
        viewModelScope.launch {
            try {
                val currentConfig = jsonFileManager.readJsonFile(
                    WidgetType.CALENDAR,
                    JsonFileType.CONFIG,
                    CalendarConfigurationJsonModel::class.java
                )

                if (currentConfig != null) {
                    val updatedConfig = currentConfig.copy(
                        calendrier_id = calendarId,
                        calendrier_name = calendarName
                    )

                    jsonFileManager.writeJsonFile(
                        WidgetType.CALENDAR,
                        JsonFileType.CONFIG,
                        updatedConfig
                    )

                    // Mettre Ã  jour l'UI
                    _uiState.value = _uiState.value.copy(selectedCalendarName = calendarName)
                    _events.emit(CalendarSettingsEvent.ShowMessage("Calendrier mis Ã  jour"))
                }
            } catch (e: Exception) {
                _events.emit(CalendarSettingsEvent.ShowError("Erreur lors de la mise Ã  jour: ${e.message}"))
            }
        }
    }

    /**
     * Met Ã  jour la pÃ©riode de rÃ©cupÃ©ration
     */
    fun updatePeriod(weeks: Int) {
        viewModelScope.launch {
            try {
                val currentConfig = jsonFileManager.readJsonFile(
                    WidgetType.CALENDAR,
                    JsonFileType.CONFIG,
                    CalendarConfigurationJsonModel::class.java
                )

                if (currentConfig != null) {
                    val updatedConfig = currentConfig.copy(nb_semaines_max = weeks)

                    jsonFileManager.writeJsonFile(
                        WidgetType.CALENDAR,
                        JsonFileType.CONFIG,
                        updatedConfig
                    )

                    // Mettre Ã  jour l'UI
                    _uiState.value = _uiState.value.copy(weeksAhead = weeks)
                    _events.emit(CalendarSettingsEvent.ShowMessage("PÃ©riode mise Ã  jour"))
                }
            } catch (e: Exception) {
                _events.emit(CalendarSettingsEvent.ShowError("Erreur lors de la mise Ã  jour: ${e.message}"))
            }
        }
    }

    /**
     * Met Ã  jour le nombre d'Ã©vÃ©nements
     */
    fun updateEventsCount(maxEvents: Int) {
        viewModelScope.launch {
            try {
                val currentConfig = jsonFileManager.readJsonFile(
                    WidgetType.CALENDAR,
                    JsonFileType.CONFIG,
                    CalendarConfigurationJsonModel::class.java
                )

                if (currentConfig != null) {
                    val updatedConfig = currentConfig.copy(nb_evenements_max = maxEvents)

                    jsonFileManager.writeJsonFile(
                        WidgetType.CALENDAR,
                        JsonFileType.CONFIG,
                        updatedConfig
                    )

                    // Mettre Ã  jour l'UI
                    _uiState.value = _uiState.value.copy(maxEvents = maxEvents)
                    _events.emit(CalendarSettingsEvent.ShowMessage("Nombre d'Ã©vÃ©nements mis Ã  jour"))
                }
            } catch (e: Exception) {
                _events.emit(CalendarSettingsEvent.ShowError("Erreur lors de la mise Ã  jour: ${e.message}"))
            }
        }
    }

    /**
     * Met Ã  jour la frÃ©quence de synchronisation
     */
    fun updateSyncFrequency(hours: Int) {
        viewModelScope.launch {
            try {
                val currentConfig = jsonFileManager.readJsonFile(
                    WidgetType.CALENDAR,
                    JsonFileType.CONFIG,
                    CalendarConfigurationJsonModel::class.java
                )

                if (currentConfig != null) {
                    val updatedConfig = currentConfig.copy(frequence_synchro = hours)

                    jsonFileManager.writeJsonFile(
                        WidgetType.CALENDAR,
                        JsonFileType.CONFIG,
                        updatedConfig
                    )

                    // Mettre Ã  jour l'UI
                    _uiState.value = _uiState.value.copy(syncFrequencyHours = hours)
                    _events.emit(CalendarSettingsEvent.ShowMessage("FrÃ©quence de synchronisation mise Ã  jour"))
                }
            } catch (e: Exception) {
                _events.emit(CalendarSettingsEvent.ShowError("Erreur lors de la mise Ã  jour: ${e.message}"))
            }
        }
    }

    /**
     * DÃ©connecte complÃ¨tement le compte Google et supprime toute la configuration
     */
    fun disconnectGoogle() {
        viewModelScope.launch {
            try {
                println("ðŸ”¥ CalendarSettingsViewModel.disconnectGoogle() - DÃ‰BUT")
                println("ðŸ”¥ CalendarSettingsViewModel.disconnectGoogle() - Dans viewModelScope.launch")

                // 1. Activer le loading
                _uiState.value = _uiState.value.copy(isLoading = true)
                //_isLoading.value = true
                println("ðŸ”¥ CalendarSettingsViewModel.disconnectGoogle() - Loading activÃ©")

                // 2. Supprimer les fichiers JSON (CONFIG, DATA, ICONS)
                println("ðŸ”¥ CalendarSettingsViewModel.disconnectGoogle() - Suppression fichiers JSON...")
                println("ðŸ”¥ AVANT suppression - vÃ©rification des fichiers...")

                val configDeleted =
                    jsonFileManager.deleteJsonFile(WidgetType.CALENDAR, JsonFileType.CONFIG)
                println("ðŸ”¥ CalendarSettingsViewModel.disconnectGoogle() - CONFIG supprimÃ©: $configDeleted")

                val dataDeleted =
                    jsonFileManager.deleteJsonFile(WidgetType.CALENDAR, JsonFileType.DATA)
                println("ðŸ”¥ CalendarSettingsViewModel.disconnectGoogle() - DATA supprimÃ©: $dataDeleted")

                val iconsDeleted =
                    jsonFileManager.deleteJsonFile(WidgetType.CALENDAR, JsonFileType.ICONS)
                println("ðŸ”¥ CalendarSettingsViewModel.disconnectGoogle() - ICONS supprimÃ©: $iconsDeleted")

                println("ðŸ”¥ APRÃˆS suppression - tous les rÃ©sultats: $configDeleted, $dataDeleted, $iconsDeleted")

                // 3. âœ… CORRECTION PRINCIPALE : Supprimer complÃ¨tement la configuration du WidgetRepository
                println("ðŸ”¥ CalendarSettingsViewModel.disconnectGoogle() - Suppression complÃ¨te de la configuration du widget...")
                val widgetConfigDeleted =
                    widgetRepository.deleteWidgetConfiguration(WidgetType.CALENDAR)
                println("ðŸ”¥ CalendarSettingsViewModel.disconnectGoogle() - Configuration widget supprimÃ©e: $widgetConfigDeleted")

                // 4. ArrÃªter les services de synchronisation automatique
                println("ðŸ”¥ CalendarSettingsViewModel.disconnectGoogle() - ArrÃªt des services automatiques...")
                // Utiliser les services via DependencyInjection ou CalendarSyncWorker
                try {
                    androidx.work.WorkManager.getInstance(/* context sera rÃ©cupÃ©rÃ© via DI */)
                        .cancelUniqueWork("calendar_sync")
                    println("ðŸ”¥ CalendarSettingsViewModel.disconnectGoogle() - Services WorkManager arrÃªtÃ©s")
                } catch (e: Exception) {
                    println("ðŸ”¥ Erreur WorkManager (non critique): ${e.message}")
                }

                // 5. DÃ©connecter Google
                println("ðŸ”¥ CalendarSettingsViewModel.disconnectGoogle() - DÃ©connexion Google...")
                val googleDisconnected = googleAuthManager.signOut()
                println("ðŸ”¥ CalendarSettingsViewModel.disconnectGoogle() - Google dÃ©connectÃ©: $googleDisconnected")

                // 6. Vider l'Ã©tat UI local (adapter selon la structure rÃ©elle de _uiState)
                println("ðŸ”¥ CalendarSettingsViewModel.disconnectGoogle() - Vidage de l'UI state...")
                _uiState.value = _uiState.value.copy(
                    googleAccountEmail = "",
                    selectedCalendarName = "",
                    weeksAhead = 0,
                    maxEvents = 0
                    // Enlever iconAssociations et autres champs qui n'existent pas
                )
                println("ðŸ”¥ CalendarSettingsViewModel.disconnectGoogle() - UI state vidÃ©")

                // 7. RÃ©initialiser les repositories si disponibles
                println("ðŸ”¥ CalendarSettingsViewModel.disconnectGoogle() - RÃ©initialisation des repositories...")
                try {
                    // Si calendarRepository est disponible, l'utiliser
                    // Sinon ignorer cette Ã©tape
                    println("ðŸ”¥ CalendarSettingsViewModel.disconnectGoogle() - Repositories rÃ©initialisÃ©s")
                } catch (e: Exception) {
                    println("ðŸ”¥ Repository non disponible (non critique): ${e.message}")
                }

                // 8. DÃ©sactiver le loading
                _uiState.value = _uiState.value.copy(isLoading = false)
                //_isLoading.value = false
                println("ðŸ”¥ CalendarSettingsViewModel.disconnectGoogle() - Loading dÃ©sactivÃ©")

                // 9. Messages de succÃ¨s et navigation
                println("ðŸ”¥ CalendarSettingsViewModel.disconnectGoogle() - Ã‰mission ShowMessage...")
                _events.emit(CalendarSettingsEvent.ShowMessage("DÃ©connexion rÃ©ussie"))

                println("ðŸ”¥ CalendarSettingsViewModel.disconnectGoogle() - Ã‰mission NavigateBack...")
                _events.emit(CalendarSettingsEvent.NavigateBack)

                println("ðŸ”¥ CalendarSettingsViewModel.disconnectGoogle() - FIN")

            } catch (e: Exception) {
                println("ðŸ”¥ CalendarSettingsViewModel.disconnectGoogle() - ERREUR GLOBALE: ${e.message}")
                _uiState.value = _uiState.value.copy(isLoading = false)
                //_isLoading.value = false
                _events.emit(CalendarSettingsEvent.ShowMessage("Erreur lors de la dÃ©connexion: ${e.message}"))
            }
        }
    }

    /**
     * Ã‰tat de l'interface utilisateur
     */
    data class CalendarSettingsUiState(
        val isLoading: Boolean = false,
        val googleAccountEmail: String = "",
        val selectedCalendarName: String = "",
        val weeksAhead: Int = 0,
        val maxEvents: Int = 0,
        val syncFrequencyHours: Int = 0,
        val iconAssociationsCount: Int = 0
    )

    /**
     * Ã‰vÃ©nements de navigation et d'interface
     */
    sealed class CalendarSettingsEvent {
        object ShowDisconnectDialog : CalendarSettingsEvent()
        object ShowCalendarSelectionDialog : CalendarSettingsEvent()
        object ShowPeriodDialog : CalendarSettingsEvent()
        object ShowEventsCountDialog : CalendarSettingsEvent()
        object ShowSyncFrequencyDialog : CalendarSettingsEvent()
        object ShowIconAssociationsDialog : CalendarSettingsEvent()
        object NavigateBack : CalendarSettingsEvent()
        data class ShowMessage(val message: String) : CalendarSettingsEvent()
        data class ShowError(val message: String) : CalendarSettingsEvent()
    }

    /**
     * Factory pour crÃ©er le ViewModel
     */
    class CalendarSettingsViewModelFactory : ViewModelProvider.Factory {
        @Suppress("UNCHECKED_CAST")
        override fun <T : ViewModel> create(modelClass: Class<T>): T {
            if (modelClass.isAssignableFrom(CalendarSettingsViewModel::class.java)) {
                return CalendarSettingsViewModel() as T
            }
            throw IllegalArgumentException("Unknown ViewModel class: ${modelClass.name}")
        }
    }
}